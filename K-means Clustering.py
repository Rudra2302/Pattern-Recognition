# -*- coding: utf-8 -*-
"""PRML assignment Q2a

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pA7eufFis1zF3Aay5hf8WViq1LJVFFF-

Import the essential packages
"""

import numpy as np
import matplotlib.pyplot as plt

"""Import the csv dataset"""

import pandas as pd
df = pd.read_csv('csv_dataset.csv')

"""Access the X and Y variables from the dataset"""

X=np.array(df['-1.2061']) # X values
X=np.append(X,-1.2061)
Y=np.array(df['-2.5268']) # Y values
Y=np.append(Y,-2.5268)
Y.shape

"""Initialize 2 random means"""

import random
means_init = random.sample(range(0, 1000), 2)
means_init

"""Perform Lloyd's Algorithm"""

cluster = np.empty((1000)) # Define an array which will specify cluster centres
mu1 = np.array([X[means_init[0]], Y[means_init[0]]]) # mean of cluster 1
mu2 = np.array([X[means_init[1]], Y[means_init[1]]]) # mean of cluster 2
error = [] # error array
error.append(0)
error.append(1)
it = 0 # variable for no of iterations

while error[it+1] != error[it]: # exit loop when error dosen't change
  it+=1
  err=0

  for i in range(1000):
    dist1 = (X[i]-mu1[0])**2 + (Y[i]-mu1[1])**2 # calculate distance from means
    dist2 = (X[i]-mu2[0])**2 + (Y[i]-mu2[1])**2
    if dist1 >= dist2: # assign new clusters
      cluster[i]=1
    elif dist1 < dist2:
      cluster[i]=2

  mu1=[0,0]
  mu2=[0,0]
  n1=0
  n2=0
  for i in range(1000): # calculate new means
    if cluster[i] == 1:
      mu1[0]+=X[i]
      mu1[1]+=Y[i]
      n1+=1
    else:
      mu2[0]+=X[i]
      mu2[1]+=Y[i]
      n2+=1

  mu1[0] = mu1[0]/n1
  mu2[0] = mu2[0]/n2
  mu1[1] = mu1[1]/n1
  mu2[1] = mu2[1]/n2

  for i in range(1000): # find error for the new distribution
    dist=0
    if cluster[i] == 1:
      dist=(X[i]-mu1[0])**2 + (Y[i]-mu1[1])**2
    else:
      dist=(X[i]-mu2[0])**2 + (Y[i]-mu2[1])**2
    err += dist

  error.append(err) # append the error value

error=error[2:]
error #Print error

"""Plot and specify 2 clusters using different colors"""

c1_x = X[cluster == 1] # plot the clusters
c2_x = X[cluster == 2]
c1_y = Y[cluster == 1]
c2_y = Y[cluster == 2]

plt.scatter(c1_x, c1_y, color='blue', label='Cluster 1')
plt.scatter(c2_x, c2_y, color='red', label='Cluster 2')

plt.title('K-Means with k=2')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.legend(title='Clusters')

"""Plot error against no of iterations"""

it_ind = [i for i in range(1,it+1)]
plt.plot(it_ind,error) # plot error vs no of iterations
plt.title('K-Means with k=2')
plt.xlabel('Number of iterations')
plt.ylabel('Error Values')

"""Perform k-means for k={2,3,4}"""

k=5 # declare no of clusters as a variable k
means_init = random.sample(range(0, 1000), k)
means_init # initialize random means

"""Initialize means"""

cluster = np.empty((1000))
mu = np.empty((k,2))
for i in range(k): # find mean of cluster centres
  mu[i][0] = X[means_init[i]]
  mu[i][1] = Y[means_init[i]]

"""Perform Lloyd's Algorithm"""

error1 = 1
error2 = 0
it = 0
n = np.zeros(k)

while error1 != error2:
  error1=error2
  error2=0
  it+=1

  for i in range(1000): # re-assignment of clusters
    min_dist=0
    for j in range(k):
      dist = (X[i]-mu[j][0])**2 + (Y[i]-mu[j][1])**2
      if j == 0:
        min_dist = dist
        cluster[i] = 0
      elif dist < min_dist:
        min_dist = dist
        cluster[i] = j

  for j in range(k):
    mu[j] = [0,0]
    n[j] = 0

  for i in range(1000): # re-calculation of cluster means
    c = int(cluster[i])
    mu[c][0] += X[i]
    mu[c][1] += Y[i]
    n[c]+=1

  for j in range(k):
    if n[j] == 0:
      mu[j][0] = 0
      mu[j][1] = 0
      continue
    mu[j][0] = mu[j][0]/n[j]
    mu[j][1] = mu[j][1]/n[j]

  for i in range(1000): # calculation of errors
    c = int(cluster[i])
    dist = (X[i]-mu[c][0])**2 + (Y[i]-mu[c][1])**2
    error2+=dist

"""Plot the cluster distribution"""

colors = ['blue', 'red', 'green', 'yellow', 'orange'] # 5 different colors
for i in range(k):
  plt.scatter(X[cluster == i], Y[cluster == i], color={colors[i]}, label=f'Cluster {i+1}')

plt.title('K-Means with k=5')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.legend(title='Clusters')

